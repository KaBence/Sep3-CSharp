@using Blazor.Services
@using Shared.Models
@namespace Basket
@inject NavigationManager navMgr
@inject IAuthService authService
@using UIComponents
@using Blazor.Pages.Shop
@using System.Text
@using System.Security.Claims
@using HttpClients.ClientInterfaces
@using Shared.DTOs
@using Shared.DTOs.Create
@inject IUserService userService
@inject IOrderService orderService


<img class="icon" src="icons/basket.png" @onclick="OpenBasket"/>
<Modal ShowModal="isOpen">
    <h1 class="h1">Your selected items</h1>
    <table class="table">
        <thead>
        <tr>
            <th>Product type</th>
            <th>Amount</th>
            <th>Price/per item</th>
            <th>Farm</th>
            <th>Remove</th>
        </tr>
        </thead>
        <tbody>
        @if (@basket.getItemsFromBasket() != null)
        {
            calculatedPrice = 0;
            @foreach (var item in basket.getItemsFromBasket())
            {
                <tr>
                    <td>@item.Type</td>
                    <td>@item.Amount</td>
                    <td>@item.Price</td>

                    <td>@item.FarmerName</td>
                    <td>
                        <img src="icons/rubbish.png" class="funnel" @onclick="@(() => basket.deleteFromBasket(@item))"/>
                    </td>
                </tr>
                calculatedPrice += item.Price * item.Amount;
            }
        }

        </tbody>
    </table>
    <div class="second">
        <label for="payment">Payment method:</label>
        <input type="text" id="payment" @bind="payment"/>

        <label for="request">Special request:</label>
        <input type="text" id="request" @bind="request">


        <label> TOTAL: @calculatedPrice</label>

    </div>

    <div class="button-container">
        <AuthorizeView >
            <Authorized>
                <button class="create-order-btn" @onclick="@CreateOrder">Create Order</button>
            </Authorized>
            <NotAuthorized >
                <button class="create-order-btn" @onclick="@DisplayMessege">Create Order</button>
            </NotAuthorized>
        </AuthorizeView>
        <button class="close-btn" @onclick="@CloseBasket">Close</button>

        <button class="continue-shopping-btn" @onclick="@ContinueShopping">Continue shopping</button>
    </div>
    <label class="msg" style="color: red">@msg</label>
</Modal>


@code {
    //deal with validation in here
    public bool isOpen = false;
    public Basket basket = Basket.getInstance();
    public string payment;
    public string request;
    public double calculatedPrice = 0.0;
    private string role;
    private string msg;


    private void OpenBasket()
    {
        isOpen = true;
        StateHasChanged();
    }


    // Close the modal
    private void CloseBasket()
    {
        isOpen = false;
        StateHasChanged();
        calculatedPrice = 0.0;
        msg = "";
    }

    public async void CreateOrder()
    {
        role = authService.GetAuthAsync().Result.Identity.Name;

        try
        {
            OrderCreateDto dto = new OrderCreateDto
            {
                CustomerID = role,
                Note = request ?? "",
                OrderItems = basket.getItemsFromBasket(),
                PaymentMethod = payment ?? ""
            };
            string customerMessege = await orderService.CreateOrderAsync(dto);
            msg = customerMessege;
            if (customerMessege == "Success!")
            {
                navMgr.NavigateTo("/");
            }
            msg = "Order Created Successfully";
            ClearBasket();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = $"Error: {e.Message}";
        }
    }

    public void DisplayMessege()
    {
        msg = "You have to be logged in to create an order";
    }

    public void ContinueShopping()
    {
        navMgr.NavigateTo("/Shop");
        CloseBasket();
    }

    public void ClearBasket()
    {
        basket.ClearBasket();
        payment = "";
        request= "";
        CloseBasket();
    }

}