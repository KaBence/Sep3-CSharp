@namespace UIComponents
@using Blazor.Services
@using global::Shared.DTOs.Create
@using global::Shared.Models
@using HttpClients.ClientInterfaces

@inject NavigationManager navMgr;
@inject IReviewServices reviewServices;
@inject IAuthService authService

<AuthorizeView>
    <NotAuthorized>
        <div class="card">
            <h3>You are not logged in as a Customer!</h3>
        </div>
    </NotAuthorized>
    <Authorized>
        <div class="card">
            <h2>Create Review</h2>
            <label>Farm:</label>
            <select @bind="selectedFarmer">
                @foreach(string item in GoodFarmerId)
                {
                    <option value="@item">@item</option>
                }
            </select>
            <div class="idk">
                <label>Rating:</label>
                <input type="number" id="rating" name="rating" min="1" max="5" required @bind="star">
            </div>
            <div class="idk">
                <label>Review:</label>
                <textarea id="review" name="review" required @bind="text"></textarea>
            </div >
        
            @if (!string.IsNullOrEmpty(errorLabel))
            {
                <div class="field">
                    <label style="color: red">
                        @errorLabel
                    </label>
                </div>
            }
        
            <div class="idk">
                <button class="btn" @onclick="() => onChange.InvokeAsync()">Cancel</button>
                <button class="btn" @onclick="Submit">Submit Review</button>
            </div>
        </div>
    </Authorized>
</AuthorizeView>


@code {
    [Parameter]
    public List<string> farmerId { get; set; }
    [Parameter]
    public int orderId { get; set; }
    
    [Parameter]
    public EventCallback onChange { get; set; }
    

    private List<string> GoodFarmerId;

    private string text;
    private double star;
    private string customerId = "";
    private string errorLabel;
    private string selectedFarmer="";
    private string selectedFarmName;

    protected async override Task OnInitializedAsync()
    {
        GoodFarmerId = farmerId.Distinct().ToList();
    }

    private async Task Submit()
    {
        errorLabel = "";
        try
        {
            customerId = authService.GetAuthAsync().Result.Identity!.Name;

            ReviewCreateDto reviewCreateDto = new ReviewCreateDto
            {
                Text = text,
                CustomerId = customerId,
                FarmerId = selectedFarmer,
                OrderId = orderId,
                Star = star,
                Comments = new List<Comment>()
            };
            string customerMessage =  await reviewServices.CreateReviewAsync(reviewCreateDto);
            errorLabel = customerMessage;
            if (customerMessage == "Success!")
            {
                await onChange.InvokeAsync();
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }

}