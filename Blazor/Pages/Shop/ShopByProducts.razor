@using HttpClients.ClientInterfaces
@using global::Shared.DTOs.Search
@using global::Shared
@using global::Shared.Models
@using System.ComponentModel.DataAnnotations
@inject IProductService productService;
@inject NavigationManager navMgr;

<div class="container-fluid">
    <div class="filter d-flex justify-content-center mb-4">
        <label class="typeLabel" for="type">Product</label>
        <input type="text" class="input" @bind="productType"/>
        <button class="btn" @onclick="LoadProducts">Filter</button>
        <button class="btn" @onclick="Clear">Clear</button>
    </div>
    
    <div class="items col-12 row">
        @foreach (var item in filtered)
        {
            <div class="card col-12 col-md-2" onclick="@(() => navMgr.NavigateTo("Products/" + item))">
                <h1>@item</h1>
                @{
                    string temp = $"/Images/{item}.jpg";
                }
                <img src="@temp">
            </div>
        }
    </div>
</div>



@code {
    private IEnumerable<Product> products;
    private string msg;
    private string productType;
    private List<String> filtered=new List<string>();
    
    
    protected override async Task OnInitializedAsync()
    {
        foreach (var item in Enum.GetNames(typeof(ProductTypes)))
        {
            filtered.Add(item);
        }
    }

    private async Task LoadProducts()
    {
        filtered = new List<string>();
        if (String.IsNullOrEmpty(productType))
        {
            foreach (var item in Enum.GetNames(typeof(ProductTypes)))
            {
                filtered.Add(item);
            }
        }
        else
        {
            foreach (var item in Enum.GetNames(typeof(ProductTypes)))
            {
                if (item.ToLower().Contains(productType.ToLower()))
                {
                    filtered.Add(item);
                }
            }
        }
    }

    private async Task Clear()
    {
        productType = "";
        LoadProducts();
    }

    
}