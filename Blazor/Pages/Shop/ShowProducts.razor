@page "/Products/{type}/{phoneNumber}"
@using global::Shared.DTOs.Search
@using global::Shared.Models
@using HttpClients.ClientInterfaces
@using global::Shared.DTOs
@inject IProductService productService;
@inject IUserService userService;
@inject NavigationManager navMgr;


<AuthorizeView Roles="Farmer">
    <NotAuthorized>
        <h3>Shop</h3>
        <div class="filter">
            <label class="filter-label">Amount:</label>
            <input class="typeLabel" type="text" @bind="productAmount"/>
            <br/>
            <label class="filter-label">Price:</label>
            <input class="typeLabel" type="text" @bind="productPrice"/>
            <br/>
            <button class="btn" @onclick="LoadProducts">Filter</button>
            <button class="btn" @onclick="Clear">Clear</button>
            <br/>
            @if (!string.IsNullOrEmpty(msg))
            {
                <label class="msg" style="color: green;font-size: 25px">@msg</label>
            }
        </div>
    </NotAuthorized>
</AuthorizeView>

@if (products == null)
{
    <p>Loading...</p>
}
else if (!products.Any())
{
    <div class="noProduct">

        <h2>No products to display</h2>
        <img src="Images/confused-john-travolta.gif"/>
    </div>
}
else
{
    <div class="items">
        @foreach (var item in products)
        {
            <div class="card">
                @{
                    string farmname = "";

                    <h1>@item.Type</h1>

                    <label>Amount: @item.Amount</label>
                    <label>Price: @item.Price</label>
                    <label>Picked Date : @item.PickedDate</label>
                    <label>Expiration Date: @item.ExpirationDate</label>


                    @foreach (var item2 in farmers)
                    {
                        if (item.FarmerID.Equals(item2.Phonenumber))
                        {
                            <label >Farm name: @item2.FarmName</label>
                            farmname = item2.FarmName;
                        }
                    }
                    <hr>
                    <AuthorizeView Roles="Farmer">
                        <Authorized>
                            <button class="btn" @onclick="@(() => navMgr.NavigateTo($"/EditProduct/{item.ProductID}"))">Edit Product</button>
                        </Authorized>
                        <NotAuthorized >
                            <label>Your desired amount:</label>
                            <input class="mb-3" type="text" @bind="myAmount"/>
                            @if (myAmount <= @item.Amount)
                            {
                                <button class="btn" @onclick="() => { AddToBasket(item.ProductID, myAmount, item.Price, farmname); }">Add To Cart</button>
                            }
                            else
                            {
                                msg = "You cant take more then there is";

                                <button class="btn" @onclick="() => { AddToBasket(item.ProductID, myAmount, item.Price, farmname); }">Add To Cart</button>
                            }
                            
                        </NotAuthorized>
                    </AuthorizeView>
                }
            </div>
        }
    </div>
}

@code {

    [Parameter]
    public string type { get; set; }

    [Parameter]
    public string phoneNumber { get; set; }

    private IEnumerable<Product> products;
    private IEnumerable<Farmer> farmers;
    public Basket basket = Basket.getInstance();
    private double productPrice { get; set; }
    private double productAmount;
    private int id;
    public int myAmount;
    private string msg;


    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
    }

    private async Task LoadProducts()
    {
        SearchProductDto dto = new SearchProductDto
        {
            Amount = Convert.ToDouble(productAmount),
            Price = Convert.ToDouble(productPrice),
            Type = type,
        };

        if (phoneNumber == "all")
        {
            products = await productService.getAsync(dto);
            farmers = await userService.GetAllFarmers(new SearchFarmerDto());
        }
        else
        {
            products = await productService.getByFarmerAsync(phoneNumber, dto);
            List<Farmer> x = new List<Farmer>();
            EditFarmerDto editFarmer = await userService.GetFarmerByIdAsync(phoneNumber);
            Farmer farmer = new Farmer
            {
                Address = editFarmer.Address,
                FarmName = editFarmer.FarmName,
                FirstName = editFarmer.FirstName,
                LastName = editFarmer.LastName,
                Pesticides = editFarmer.Pesticides,
                Phonenumber = editFarmer.PhoneNumber,
                Rating = 0
            };
            x.Add(farmer);
            farmers = x;
        }
    }


    private async Task AddToBasket(int id, double amount, double price, string farmName)
    {
        basket.AddToBasket(new OrderItem(id, type, amount, price, farmName));
        myAmount = 0;
        msg = "Product Added to your basket!";
    }


    private async Task Clear()
    {
        productAmount = 0;
        productPrice = 0;
        await LoadProducts();
    }

}